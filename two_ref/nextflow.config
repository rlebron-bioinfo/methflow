/*
 * -------------------------------------------------
 *  MethFlow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

manifest {
  homePage = 'https://github.com/rlebron-bioinfo/methflow'
  description = 'DNA Methylation (BS-Seq) Analysis Pipeline. Started December 2018.'
  mainScript = 'main.nf'
}

// Configurable variables
params {
  version = '0.0.0' // Pipeline version
  nf_required_version = '0.30.0' // Minimum version of nextflow required
  container = 'rlebronbioinfo/methflow:0.0.0'

  // Pipeline options
  name = "methflow.two_ref"
  saveReference1 = false
  saveReference2 = false
  saveTrimmed = false
  saveAlignedIntermediates = false
  reads = false
  singleEnd = false
  outdir = './results'
  multiqc_config = "$baseDir/conf/multiqc_config.yml"
  notrim = false
  nodedup = false
  norealign = true
  nombias = true
  use_unmapped = true
  use_ambiguous = true
  non_directional = false
  comprehensive = false
  relaxMismatches = false
  numMismatches = 0.6
  // 0.6 will allow a penalty of bp * -0.6
  // For 100bp reads, this is -60. Mismatches cost -6, gap opening -5 and gap extension -2
  // So -60 would allow 10 mismatches or ~ 8 x 1-2bp indels
  // Bismark default is 0.2 (L,0,-0.2), Bowtie2 default is 0.6 (L,0,-0.6)
  mindepth = 1
}

profiles {
  standard {
    includeConfig 'conf/base.config'
  }
  conda { 
    process.conda = "$baseDir/environment.yml"
  }
  docker { 
    docker.enabled = true
  }
  singularity {
    singularity.enabled = true
  }
  test {
    includeConfig 'conf/base.config'
    // includeConfig 'conf/test.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/MethFlow_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/MethFlow_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/MethFlow_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/MethFlow_dag.svg"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
