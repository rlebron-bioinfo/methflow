/*
 * -------------------------------------------------
 *  Base Nextflow config file
 * -------------------------------------------------
 * This file contains basic process requirement setup
 * It DOES NOT contain any config for cluster, so will run
 * in default mode by itself. It should be used with
 * the max_memory, max_cpus and max_time params for
 * customising hardware limits
 */

process {
  container = params.container

  cpus = { check_max( 1 * task.attempt, 'cpus') }
  memory = { check_max( 8.GB * task.attempt, 'memory') }
  time = { check_max( 2.h * task.attempt, 'time') }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'terminate' }
  maxRetries = 3
  maxErrors = '-1'

  // Resource requirements
  withName:makeMergedFasta {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }  
  withName:makeBismarkIndex1 {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:makeBismarkIndex2 {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:makeMergedBismarkIndex {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:trim_galore {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 16.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }
  withName:bismark_align_1 {
    cpus = { check_max( 16 * task.attempt, 'cpus') }
    memory = { check_max( 128.GB * task.attempt, 'memory') }
    time = { check_max( 10.d * task.attempt, 'time') }
  }
  withName:bismark_align_2 {
    cpus = { check_max( 16 * task.attempt, 'cpus') }
    memory = { check_max( 128.GB * task.attempt, 'memory') }
    time = { check_max( 10.d * task.attempt, 'time') }
  }
  withName:samtools_sort_by_coordinates {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }
  withName:samtools_merge {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }
  withName:removeDuplicates {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 2.d * task.attempt, 'time') }
  }
  withName:indelRealign {
    cpus = { check_max( 16 * task.attempt, 'cpus') }
    memory = { check_max( 128.GB * task.attempt, 'memory') }
    time = { check_max( 10.d * task.attempt, 'time') }
  }
  withName:qualimap {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 6.h * task.attempt, 'time') }
  }
  withName:mbias_analysis {
    cpus = { check_max( 16 * task.attempt, 'cpus') }
    memory = { check_max( 128.GB * task.attempt, 'memory') }
    time = { check_max( 10.d * task.attempt, 'time') }
  }
  withName:samtools_sort_by_qname {
    cpus = { check_max( 16 * task.attempt, 'cpus') }
    memory = { check_max( 128.GB * task.attempt, 'memory') }
    time = { check_max( 10.d * task.attempt, 'time') }
  }
  withName:MethylExtract {
    cpus = { check_max( 16 * task.attempt, 'cpus') }
    memory = { check_max( 128.GB * task.attempt, 'memory') }
    time = { check_max( 10.d * task.attempt, 'time') }
  }
}


// Defaults config params, may be overwritten by later configs
params {
  max_memory = 128.GB
  max_cpus = 16
  max_time = 10.d
}
