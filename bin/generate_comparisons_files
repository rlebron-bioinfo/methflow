#!/usr/bin/env python3

import logging, click
import os, sys
import pathlib, json
import csv, gzip, bz2

prog = 'generate_comparisons_files'
version = '0.0.0'

logger = logging.getLogger(prog)
logger.setLevel(logging.DEBUG)
format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
formatter = logging.Formatter(format)

logstream = logging.StreamHandler()
logstream.setLevel(logging.DEBUG)
logstream.setFormatter(formatter)
logger.addHandler(logstream)

logfile = logging.FileHandler('generate_comparisons_files.log')
logfile.setLevel(logging.DEBUG)
logfile.setFormatter(formatter)
logger.addHandler(logfile)


@click.command()
@click.option('-i', '--indir', required=True, prompt=False, type=click.Path(exists=True, file_okay=False, dir_okay=True, readable=True, resolve_path=True))
@click.option('-o', '--outdir', required=True, prompt=False, type=click.Path(exists=False, writable=True, resolve_path=True))
@click.option('--comparisons', required=True, prompt=False, type=click.Path(exists=True, file_okay=True, dir_okay=False, readable=True, resolve_path=True))
@click.option('--groups', required=True, prompt=False, type=click.Path(exists=True, file_okay=True, dir_okay=False, readable=True, resolve_path=True))
@click.option('--comprehensive/--no-comprehensive', is_flag=True, default=False)
@click.option('--ignore-upper/--no-ignore-upper', is_flag=True, default=False)
@click.option('--ignore-diagonal/--no-ignore-diagonal', is_flag=True, default=True)
@click.option('--ignore-lower/--no-ignore-lower', is_flag=True, default=False)
@click.option('--min-coverage', default=10, type=click.IntRange(min=1, max=None, clamp=False))
@click.option('--min-diffmeth', default=25, type=click.IntRange(min=0, max=100, clamp=False))
@click.option('--qval', default=0.01, type=click.FloatRange(min=0, max=1, clamp=False))
@click.version_option(version=version)
def main(indir, outdir, comparisons, groups, comprehensive, ignore_upper, ignore_diagonal, ignore_lower, min_coverage, min_diffmeth, qval):
    if os.path.isfile(outdir):
        abort()
    elif not os.path.exists(outdir):
        os.makedirs(outdir)

    if all([ignore_upper, ignore_diagonal, ignore_lower]):
        abort()

    g_handle = open(groups, 'rt')
    g_reader = csv.reader(g_handle, delimiter='\t')
    groups_dict = dict()
    for row in g_reader:
        if not row[0].startswith('#'):
            sample, labels = row
            labels = labels.split(';')
            for label in labels:
                label = int(label)
                if label not in groups_dict:
                    groups_dict[label] = [sample]
                else:
                    groups_dict[label].append(sample)
    g_handle.close()

    c_handle = open_handle(comparisons, mode='rt')
    c_reader = csv.reader(c_handle, delimiter='\t')

    is_matrix = detect_matrix(c_handle, c_reader)

    if is_matrix:
        comparisons_dict = dict()
        for row in c_reader:
            if len(row) > 1:
                cols = row[1:]
                break
        for n_row, row in enumerate(c_reader):
            if len(row) > 1:
                row_label = int(row[0])
                if row_label not in comparisons_dict:
                    comparisons_dict[row_label] = set()
                for n_col, col in enumerate(row[1:]):
                    col_label = int(cols[n_col])
                    if col_label not in comparisons_dict:
                        comparisons_dict[col_label] = set()
                    if all([row_label == col_label, not ignore_diagonal, bool(col)]):
                        comparisons_dict[row_label].add(col_label)
                    elif all([n_row < n_col, not ignore_upper, bool(col)]):
                        comparisons_dict[row_label].add(col_label)
                    elif all([n_row > n_col, not ignore_lower, bool(col)]):
                        comparisons_dict[col_label].add(row_label)

    else:
        comparisons_dict = dict()
        for row in c_reader:
            if len(row) > 1 and not row[0].startswith('#'):
                row_label, col_label, value = row
                row_label = int(row_label)
                col_label = int(col_label)
                if row_label not in comparisons_dict:
                    comparisons_dict[row_label] = set()
                if all([row_label not in comparisons_dict.get(col_label, set()), bool(value)]):
                    comparisons_dict[row_label].add(col_label)
    
    c_handle.close()

    if comprehensive:
        for group_1 in comparisons_dict:
            if comparisons_dict[group_1]:
                for group_2 in comparisons_dict[group_1]:
                    data = {
                        'path' : [],
                        'id' : [],
                        'assembly' : 'assembly',
                        'groups' : [],
                        'context' : 'CNN',
                        'output' : f'{group_1}_{group_2}_CG',
                        'minCoverage' : min_coverage,
                        'minDiffMeth' : min_diffmeth,
                        'minQvalue' : qval
                    }
                    for sample in groups_dict[group_1]:
                        data['path'].append(f'{indir}/{sample}.CG.mk')
                        data['id'].append(sample)
                        data['groups'].append(group_1)
                    for sample in groups_dict[group_2]:
                        data['path'].append(f'{indir}/{sample}.CG.mk')
                        data['id'].append(sample)
                        data['groups'].append(group_2)
                    json.dump(data, open(f'{outdir}/{group_1}_{group_2}_CG.json', 'wt'))

                    data = {
                        'path' : [],
                        'id' : [],
                        'assembly' : 'assembly',
                        'groups' : [],
                        'context' : 'CNN',
                        'output' : f'{group_1}_{group_2}_CHG',
                        'minCoverage' : min_coverage,
                        'minDiffMeth' : min_diffmeth,
                        'minQvalue' : qval
                    }
                    for sample in groups_dict[group_1]:
                        data['path'].append(f'{indir}/{sample}.CHG.mk')
                        data['id'].append(sample)
                        data['groups'].append(group_1)
                    for sample in groups_dict[group_2]:
                        data['path'].append(f'{indir}/{sample}.CHG.mk')
                        data['id'].append(sample)
                        data['groups'].append(group_2)
                    json.dump(data, open(f'{outdir}/{group_1}_{group_2}_CHG.json', 'wt'))

                    data = {
                        'path' : [],
                        'id' : [],
                        'assembly' : 'assembly',
                        'groups' : [],
                        'context' : 'CNN',
                        'output' : f'{group_1}_{group_2}_CHH',
                        'minCoverage' : min_coverage,
                        'minDiffMeth' : min_diffmeth,
                        'minQvalue' : qval
                    }
                    for sample in groups_dict[group_1]:
                        data['path'].append(f'{indir}/{sample}.CHH.mk')
                        data['id'].append(sample)
                        data['groups'].append(group_1)
                    for sample in groups_dict[group_2]:
                        data['path'].append(f'{indir}/{sample}.CHH.mk')
                        data['id'].append(sample)
                        data['groups'].append(group_2)
                    json.dump(data, open(f'{outdir}/{group_1}_{group_2}_CHH.json', 'wt'))

    else:
        for group_1 in comparisons_dict:
            if comparisons_dict[group_1]:
                for group_2 in comparisons_dict[group_1]:
                    data = {
                        'path' : [],
                        'id' : [],
                        'assembly' : 'assembly',
                        'groups' : [],
                        'context' : 'CNN',
                        'output' : f'{group_1}_{group_2}_CG',
                        'minCoverage' : min_coverage,
                        'minDiffMeth' : min_diffmeth,
                        'minQvalue' : qval
                    }
                    for sample in groups_dict[group_1]:
                        data['path'].append(f'{indir}/{sample}.CG.mk')
                        data['id'].append(sample)
                        data['groups'].append(group_1)
                    for sample in groups_dict[group_2]:
                        data['path'].append(f'{indir}/{sample}.CG.mk')
                        data['id'].append(sample)
                        data['groups'].append(group_2)
                    json.dump(data, open(f'{outdir}/{group_1}_{group_2}_CG.json', 'wt'))


def abort():
    logger.error(f'aborting program...')
    sys.exit(1)


def open_handle(file, mode='rt'):
    ext = os.path.splitext(os.path.basename(file))[1]
    if ext == '.gz':
        handle = gzip.open(file, mode=mode)
    elif ext == '.bz2':
        handle = bz2.open(file, mode=mode)
    else:
        handle = open(file, mode)
    return handle


def detect_matrix(handle, reader):
    first_row = []
    for row in reader:
        if len(row) > 1:
            first_row = row[1:]
            break
    first_column = [row[0] for row in reader if len(row) > 1]
    handle.seek(0, 0)
    return first_row == first_column


if __name__ == '__main__':
    main()
