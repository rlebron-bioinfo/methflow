#!/usr/bin/env python3
#version 1.0
#author: Ricardo Lebron
#email: rlebron@ugr.es

import argparse

parser = argparse.ArgumentParser(description='Convert from MethylExtract Output File to methylKit Input File')
parser.add_argument('-i', '--infile', help='MethylExtract Output File', action='store', type=str, required=True)
parser.add_argument('-o', '--outfile', help='methylKit Input File', action='store', type=str, required=True)
parser.add_argument('-c', '--context', help='Methylation Context', action='store', type=str, choices=['CG', 'CHG', 'CHH'], required=True)
parser.add_argument('-d', '--destrand', help='Destrand', action='store_true')
args = vars(parser.parse_args())

HEADER = "chrBase\tchr\tbase\tstrand\tcoverage\tfreqC\tfreqT\n"

with open(args['infile'],'rt') as i:
	with open(args['outfile'],'wt') as o:
		o.write(HEADER)
	for line in i:
		if line[0]!="#":
			with open(args['outfile'],'at') as o:
				isSS = ("\t.\t" in line)
				line = line.strip().split('\t')
				CHR = line[0]
				BASE_F = line[1]
				if args['context']=="CG":
					BASE_R = str(int(line[1])+1)
				elif args['context'].startswith("CH"):
					BASE_R = str(int(line[1])+2)
				CHRBASE_F = CHR + "." + BASE_F
				CHRBASE_R = CHR + "." + BASE_R
				hasF = (line[4] != ".")
				hasR = (line[7] != ".")
				if not hasF:
					line[3] = -1
					line[4] = -1
				if not hasR:
					line[6] = -1
					line[7] = -1
				METH_F = int(line[3])
				METH_R = int(line[6])
				COVERAGE_F = int(line[4])
				COVERAGE_R = int(line[7])
				if args['destrand']:
					METH_B = 0
					COVERAGE_B = 0
					if METH_F!=-1:
						METH_B += METH_F
					if METH_R!=-1:
						METH_B += METH_R
					if COVERAGE_F!=-1:
						COVERAGE_B += COVERAGE_F
					if COVERAGE_R!=-1:
						COVERAGE_B += COVERAGE_R
					freqC_B = round(((float(METH_B)/COVERAGE_B)*100),2)
					freqT_B = str(round((100 - freqC_B),2))
					COVERAGE_B,freqC_B = str(COVERAGE_B),str(freqC_B)
					line_B = "\t".join([CHRBASE_F,CHR,BASE_F,"F",COVERAGE_B,freqC_B,freqT_B]) + "\n"
					o.write(line_B)
				else:
					freqC_F = round(((float(METH_F)/COVERAGE_F)*100),2)
					freqC_R = round(((float(METH_R)/COVERAGE_R)*100),2)
					freqT_F = str(round((100 - freqC_F),2))
					freqT_R = str(round((100 - freqC_R),2))
					COVERAGE_F,COVERAGE_R,freqC_F,freqC_R = str(COVERAGE_F),str(COVERAGE_R),str(freqC_F),str(freqC_R)
					if not isSS:
						line_F = "\t".join([CHRBASE_F,CHR,BASE_F,"F",COVERAGE_F,freqC_F,freqT_F]) + "\n"
						o.write(line_F)
						line_R = "\t".join([CHRBASE_R,CHR,BASE_R,"R",COVERAGE_R,freqC_R,freqT_R]) + "\n"
						o.write(line_R)
					else:
						if hasF:
							line_F = "\t".join([CHRBASE_F,CHR,BASE_F,"F",COVERAGE_F,freqC_F,freqT_F]) + "\n"
							o.write(line_F)
						if hasR:
							line_R = "\t".join([CHRBASE_R,CHR,BASE_R,"R",COVERAGE_R,freqC_R,freqT_R]) + "\n"
							o.write(line_R)

