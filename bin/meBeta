#!/usr/bin/env python3

import logging, click
import os, sys

prog = 'meBeta'
version = '0.0.0'

logger = logging.getLogger(prog)
logger.setLevel(logging.DEBUG)
format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
formatter = logging.Formatter(format)

logstream = logging.StreamHandler()
logstream.setLevel(logging.DEBUG)
logstream.setFormatter(formatter)
logger.addHandler(logstream)

logfile = logging.FileHandler('meBeta.log')
logfile.setLevel(logging.DEBUG)
logfile.setFormatter(formatter)
logger.addHandler(logfile)


@click.command()
@click.option('-i', '--input', '__input', required=True, prompt=False, type=click.Path(exists=True, readable=True, resolve_path=True))
@click.option('-o', '--output', '__output', required=True, prompt=False, type=click.Path(exists=False, writable=True, resolve_path=True))
@click.option('--file/--no-file', 'isfile', is_flag=True, default=True)
@click.option('--comprehensive/--no-comprehensive', is_flag=True, default=False)
@click.version_option(version=version)
def main(__input, __output, isfile, comprehensive):
    if isfile:
        i = open(__input, 'rt')
        o = open(__output, 'wt')
        for l in i:
            if not l.startswith('#'):
                chrom, pos, context, w_meth, w_cove, w_qual, c_meth, c_cove, c_qual = l.replace('.', '0').strip().split('\t')
                w_meth, w_cove, w_qual, c_meth, c_cove, c_qual = list(map(int, [w_meth, w_cove, w_qual, c_meth, c_cove, c_qual]))
                w_beta = round(w_meth/(w_meth + w_cove), 2) if w_cove != 0 else 'NA'
                c_beta = round(c_meth/(c_meth + c_cove), 2) if c_cove != 0 else 'NA'
                beta = round((w_meth + c_meth)/((w_meth + c_meth) + (w_cove + c_cove)), 2) if (w_cove + c_cove) != 0 else 'NA'
                line = [chrom, pos, context, w_meth, w_cove, w_qual, c_meth, c_cove, c_qual, w_beta, c_beta, beta]
                line = '\t'.join(list(map(str, line))) + '\n'
                o.write(line)
        i.close()
        o.close()

    else:
        if os.path.isfile(__input):
            abort()
        if os.path.isfile(__output):
            abort()
        elif not os.path.exists(__output):
            os.makedirs(__output)
        if comprehensive:
            for root, dirs, files in os.walk(__input):
                for f in files:
                    if f in {'CG.output', 'CHG.output', 'CHH.output'}:
                        if os.path.abspath(root) == os.path.abspath(__input):
                            basename = ''
                        else:
                            basename = os.path.basename(root)
                        current_path = os.path.join(root, f)
                        new_path = os.path.join(__output, f'{basename}.{f}')
                        i = open(current_path, 'rt')
                        o = open(new_path, 'wt')
                        for l in i:
                            if not l.startswith('#'):
                                chrom, pos, context, w_meth, w_cove, w_qual, c_meth, c_cove, c_qual = l.replace('.', '0').strip().split('\t')
                                w_meth, w_cove, w_qual, c_meth, c_cove, c_qual = list(map(int, [w_meth, w_cove, w_qual, c_meth, c_cove, c_qual]))
                                w_beta = round(w_meth/(w_meth + w_cove), 2) if w_cove != 0 else 'NA'
                                c_beta = round(c_meth/(c_meth + c_cove), 2) if c_cove != 0 else 'NA'
                                beta = round((w_meth + c_meth)/((w_meth + c_meth) + (w_cove + c_cove)), 2) if (w_cove + c_cove) != 0 else 'NA'
                                line = [chrom, pos, context, w_meth, w_cove, w_qual, c_meth, c_cove, c_qual, w_beta, c_beta, beta]
                                line = '\t'.join(list(map(str, line))) + '\n'
                                o.write(line)
                        i.close()
                        o.close()
        else:
            for root, dirs, files in os.walk(__input):
                for f in files:
                    if f == 'CG.output':
                        if os.path.abspath(root) == os.path.abspath(__input):
                            basename = ''
                        else:
                            basename = os.path.basename(root)
                        current_path = os.path.join(root, f)
                        new_path = os.path.join(__output, f'{basename}.{f}')
                        i = open(current_path, 'rt')
                        o = open(new_path, 'wt')
                        for l in i:
                            if not l.startswith('#'):
                                chrom, pos, context, w_meth, w_cove, w_qual, c_meth, c_cove, c_qual = l.replace('.', '0').strip().split('\t')
                                w_meth, w_cove, w_qual, c_meth, c_cove, c_qual = list(map(int, [w_meth, w_cove, w_qual, c_meth, c_cove, c_qual]))
                                w_beta = round(w_meth/(w_meth + w_cove), 2) if w_cove != 0 else 'NA'
                                c_beta = round(c_meth/(c_meth + c_cove), 2) if c_cove != 0 else 'NA'
                                beta = round((w_meth + c_meth)/((w_meth + c_meth) + (w_cove + c_cove)), 2) if (w_cove + c_cove) != 0 else 'NA'
                                line = [chrom, pos, context, w_meth, w_cove, w_qual, c_meth, c_cove, c_qual, w_beta, c_beta, beta]
                                line = '\t'.join(list(map(str, line))) + '\n'
                                o.write(line)
                        i.close()
                        o.close()


def abort():
    logger.error(f'aborting program...')
    sys.exit(1)


if __name__ == '__main__':
    main()
