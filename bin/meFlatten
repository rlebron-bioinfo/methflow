#!/usr/bin/env python3

import logging, click
import os, sys, shutil

prog = 'meFlatten'
version = '0.0.0'

logger = logging.getLogger(prog)
logger.setLevel(logging.DEBUG)
format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
formatter = logging.Formatter(format)

logstream = logging.StreamHandler()
logstream.setLevel(logging.DEBUG)
logstream.setFormatter(formatter)
logger.addHandler(logstream)

logfile = logging.FileHandler('meFlatten.log')
logfile.setLevel(logging.DEBUG)
logfile.setFormatter(formatter)
logger.addHandler(logfile)


@click.command()
@click.option('-i', '--indir', required=True, prompt=False, type=click.Path(exists=True, file_okay=False, dir_okay=True, readable=True, resolve_path=True))
@click.option('-o', '--outdir', required=True, prompt=False, type=click.Path(exists=False, writable=True, resolve_path=True))
@click.option('--comprehensive/--no-comprehensive', is_flag=True, default=False)
@click.version_option(version=version)
def main(indir, outdir, comprehensive):
    if os.path.isfile(outdir):
        abort()
    elif not os.path.exists(outdir):
        os.makedirs(outdir)
    
    if comprehensive:
        for root, dirs, files in os.walk(indir):
            for f in files:
                if f in {'CG.output', 'CHG.output', 'CHH.output'}:
                    if os.path.abspath(root) == os.path.abspath(indir):
                        basename = ''
                    else:
                        basename = os.path.basename(root)
                    current_path = os.path.join(root, f)
                    new_path = os.path.join(outdir, f'{basename}.{f}')
                    shutil.copy2(current_path, new_path)
    else:
        for root, dirs, files in os.walk(indir):
            for f in files:
                if f == 'CG.output':
                    if os.path.abspath(root) == os.path.abspath(indir):
                        basename = ''
                    else:
                        basename = os.path.basename(root)
                    current_path = os.path.join(root, f)
                    new_path = os.path.join(outdir, f'{basename}.{f}')
                    shutil.copy2(current_path, new_path)


def abort():
    logger.error(f'aborting program...')
    sys.exit(1)


if __name__ == '__main__':
    main()
