#!/usr/bin/env python3

import logging, click
import os, sys
import shlex, shutil
from subprocess import Popen, PIPE

prog = 'meSort'
version = '0.0.0'

logger = logging.getLogger(prog)
logger.setLevel(logging.DEBUG)
format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
formatter = logging.Formatter(format)

logstream = logging.StreamHandler()
logstream.setLevel(logging.DEBUG)
logstream.setFormatter(formatter)
logger.addHandler(logstream)

logfile = logging.FileHandler('meSort.log')
logfile.setLevel(logging.DEBUG)
logfile.setFormatter(formatter)
logger.addHandler(logfile)


@click.command()
@click.option('-i', '--input', '__input', required=True, prompt=False, type=click.Path(exists=True, readable=True, resolve_path=True))
@click.option('-o', '--output', '__output', required=True, prompt=False, type=click.Path(exists=False, writable=True, resolve_path=True))
@click.option('--file/--no-file', 'isfile', is_flag=True, default=True)
@click.option('--comprehensive/--no-comprehensive', is_flag=True, default=False)
@click.version_option(version=version)
def main(__input, __output, isfile, comprehensive):
    if isfile:
        i = open(__input, 'rt')
        o = open(__output, 'wt')
        header = i.readline()
        if not header.startswith('#'):
            i.seek(0, 0)
        else:
            o.write(header)
        cmd = 'sort -k1,1V -k2,2n'
        exec_cmd(cmd, stdin=i, stdout=o, stderr=PIPE)

    else:
        if os.path.isfile(__input):
            abort()
        if os.path.isfile(__output):
            abort()
        elif not os.path.exists(__output):
            os.makedirs(__output)
        if comprehensive:
            for root, dirs, files in os.walk(__input):
                for f in files:
                    if f in {'CG.output', 'CHG.output', 'CHH.output'}:
                        if os.path.abspath(root) == os.path.abspath(__input):
                            basename = ''
                        else:
                            basename = os.path.basename(root)
                        current_path = os.path.join(root, f)
                        new_path = os.path.join(__output, f'{basename}.{f}')
                        i = open(current_path, 'rt')
                        o = open(new_path, 'wt')
                        header = i.readline()
                        if not header.startswith('#'):
                            i.seek(0, 0)
                        else:
                            o.write(header)
                        cmd = 'sort -k1,1V -k2,2n'
                        exec_cmd(cmd, stdin=i, stdout=o, stderr=PIPE)
        else:
            for root, dirs, files in os.walk(__input):
                for f in files:
                    if f == 'CG.output':
                        if os.path.abspath(root) == os.path.abspath(__input):
                            basename = ''
                        else:
                            basename = os.path.basename(root)
                        current_path = os.path.join(root, f)
                        new_path = os.path.join(__output, f'{basename}.{f}')
                        i = open(current_path, 'rt')
                        o = open(new_path, 'wt')
                        header = i.readline()
                        if not header.startswith('#'):
                            i.seek(0, 0)
                        else:
                            o.write(header)
                        cmd = 'sort -k1,1V -k2,2n'
                        exec_cmd(cmd, stdin=i, stdout=o, stderr=PIPE)


def exec_cmd(cmd, stdin, stdout, stderr):
    p = Popen(shlex.split(cmd), stdin=stdin, stdout=stdout, stderr=stderr)
    out, err = p.communicate()
    if p.returncode != 0:
        logger.error(f'error executing command: {cmd}')
        logger.error(err)
        abort()


def abort():
    logger.error(f'aborting program...')
    sys.exit(1)


if __name__ == '__main__':
    main()
